declare type Fn = (...q: any) => any;
declare type ListenerSet = Set<Fn>;
declare type Listeners = Map<string, ListenerSet>;
export default abstract class Houk {
    protected listeners: Listeners;
    /**
     * Add an event listener
     * @param event The event to listen to
     * @param fn The event handler
     */
    on(event: string, fn: Fn): void;
    /**
     * Remove an event listener
     * @param event The event name
     * @param fn The event handler
     */
    off(event: string, fn: Fn): boolean;
    /**
     Emit an event to all listeners.
     * @param event The event name
     * @param thisArg The value of `this` which will be passed to the listener function.
     * @param args Arguments that will be passed to the listener function.
     */
    protected emit(event: string, thisArg?: any, ...args: any): Promise<any>;
    /**
     * Get all listeners of a particular event
     * @param event Event name
     */
    protected getListeners(event: string): ListenerSet;
}
/**
 * HoukBus allows you to use Houk without creating an extended class.
 * All methods are public.
 */
export declare class HoukBus extends Houk {
    emit: (event: string, thisArg?: any, ...args: any) => Promise<any>;
    getListeners: (event: string) => Set<Fn>;
}
export {};
