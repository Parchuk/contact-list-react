"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const houk_1 = __importDefault(require("houk"));
const slugo_1 = __importDefault(require("slugo"));
const always_array_1 = __importDefault(require("always-array"));
const ContentlyPlugin_1 = require("./ContentlyPlugin");
class Contently extends houk_1.default {
    constructor(options) {
        super();
        this.plugins = {};
        this.results = [];
        this.options = Object.assign({ cwd: process.cwd(), slugify: slugo_1.default }, (options || {}));
    }
    use({ name, runner }, ...options) {
        if (this.plugins[name]) {
            throw new Error('Plugin is already in use.');
        }
        const plugin = new ContentlyPlugin_1.ContentlyPlugin({
            name,
            runner,
            options,
            instance: this
        });
        this.plugins[name] = plugin;
        this.emit('afterPluginAdded', this, plugin);
        return this;
    }
    addResult(result) {
        return __awaiter(this, void 0, void 0, function* () {
            const array = always_array_1.default(result);
            const promises = array.map((result) => __awaiter(this, void 0, void 0, function* () { return this.emit('beforeAddResult', this, result); }));
            const results = yield Promise.all(promises);
            this.results.push(...results);
            this.emit('addResult', undefined, result);
            return this;
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.emit('beforeRun', this);
            this.results = [];
            yield this.emit('run', this);
            yield this.emit('afterRun', this);
            return this;
        });
    }
}
exports.Contently = Contently;
